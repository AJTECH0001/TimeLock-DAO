import CborArray from "../../cbor/CborObj/CborArray";
import CborMap, { CborMapEntry } from "../../cbor/CborObj/CborMap";
import CborUInt from "../../cbor/CborObj/CborUInt";
import { canBeUInteger, CanBeUInteger, forceUInteger } from "../../types/ints/Integer";
import ObjectUtils from "../../utils/ObjectUtils";

type AnyV1CostModel = CostModelPlutusV1 | CostModelPlutusV1Array;

type AnyV2CostModel = CostModelPlutusV2 | CostModelPlutusV2Array;

export interface CostModels {
    PlutusV1?: AnyV1CostModel
    PlutusV2?: AnyV2CostModel
}

export default CostModels;

export function isCostModels( something: any ): something is CostModels
{
    if(!ObjectUtils.isObject( something )) return false;

    if( ObjectUtils.hasOwn<object,"PlutusV1">( something, "PlutusV1" ) )
    {
        const pv1 = something.PlutusV1;

        let length = Array.isArray( pv1 ) ? pv1.length : 0;
        if(!(
            Array.isArray( pv1 ) ?
                pv1.every( canBeUInteger ):
                Object.keys( pv1 ).every( k => {
                    length++;
                    return canBeUInteger( pv1[k] ) 
                }) &&
            length >= 166
        )) return false;
    }

    if( ObjectUtils.hasOwn<object,"PlutusV2">( something, "PlutusV2" ) )
    {
        const pv2 = something.PlutusV2;

        let length = Array.isArray( pv2 ) ? pv2.length : 0;
        if(!(
            Array.isArray( pv2 ) ?
                pv2.every( canBeUInteger ):
                Object.keys( pv2 ).every( k => {
                    length++;
                    return canBeUInteger( pv2[k] ) 
                }) &&
            length >= 175
        )) return false;
    }

    return true
};

export function costModelsToCborObj( costmdls: CostModels ): CborMap
{
    const {
        PlutusV1,
        PlutusV2
    } = costmdls;

    return new CborMap([
        PlutusV1 === undefined ? undefined :
        {
            k: new CborUInt( 0 ),
            v: new CborArray( toCostModelArrV1( PlutusV1 ).map( n => new CborUInt( forceUInteger( n ).asBigInt ) ) )
        },
        PlutusV2 === undefined ? undefined :
        {
            k: new CborUInt( 1 ),
            v: new CborArray( toCostModelArrV2( PlutusV2 ).map( n => new CborUInt( forceUInteger( n ).asBigInt ) ) )
        }
    ].filter( elem => elem !== undefined ) as CborMapEntry[])
}

export function toCostModelArrV1( v1: AnyV1CostModel ): CostModelPlutusV1Array
{
    if( Array.isArray( v1 ) ) return v1;

    // order matters; cant do 'Object.keys'
    return Object.freeze([
        v1["mapData-memory-arguments"],
        v1["lessThanInteger-memory-arguments"],
        v1["sha3_256-cpu-arguments-slope"],
        v1["bData-cpu-arguments"],
        v1["equalsByteString-cpu-arguments-intercept"],
        v1["equalsString-cpu-arguments-constant"],
        v1["modInteger-memory-arguments-slope"],
        v1["equalsInteger-memory-arguments"],
        v1["trace-cpu-arguments"],
        v1["iData-cpu-arguments"],
        v1["equalsByteString-memory-arguments"],
        v1["unIData-memory-arguments"],
        v1["consByteString-memory-arguments-intercept"],
        v1["cekLamCost-exBudgetCPU"],
        v1["indexByteString-cpu-arguments"],
        v1["cekStartupCost-exBudgetMemory"],
        v1["listData-memory-arguments"],
        v1["divideInteger-cpu-arguments-constant"],
        v1["lessThanInteger-cpu-arguments-intercept"],
        v1["verifySignature-cpu-arguments-slope"],
        v1["appendString-memory-arguments-intercept"],
        v1["equalsString-cpu-arguments-slope"],
        v1["blake2b-cpu-arguments-intercept"],
        v1["encodeUtf8-cpu-arguments-slope"],
        v1["mapData-cpu-arguments"],
        v1["equalsByteString-cpu-arguments-slope"],
        v1["multiplyInteger-cpu-arguments-intercept"],
        v1["cekStartupCost-exBudgetCPU"],
        v1["sndPair-memory-arguments"],
        v1["sha3_256-cpu-arguments-intercept"],
        v1["addInteger-cpu-arguments-slope"],
        v1["constrData-memory-arguments"],
        v1["divideInteger-memory-arguments-intercept"],
        v1["cekForceCost-exBudgetCPU"],
        v1["equalsByteString-cpu-arguments-constant"],
        v1["modInteger-cpu-arguments-model-arguments-intercept"],
        v1["sliceByteString-memory-arguments-slope"],
        v1["equalsString-memory-arguments"],
        v1["cekLamCost-exBudgetMemory"],
        v1["lessThanEqualsInteger-cpu-arguments-intercept"],
        v1["quotientInteger-memory-arguments-minimum"],
        v1["consByteString-cpu-arguments-intercept"],
        v1["appendByteString-memory-arguments-slope"],
        v1["lessThanByteString-cpu-arguments-slope"],
        v1["lessThanByteString-memory-arguments"],
        v1["multiplyInteger-cpu-arguments-slope"],
        v1["cekVarCost-exBudgetCPU"],
        v1["cekDelayCost-exBudgetMemory"],
        v1["blake2b-cpu-arguments-slope"],
        v1["mkNilData-cpu-arguments"],
        v1["appendByteString-cpu-arguments-slope"],
        v1["appendString-memory-arguments-slope"],
        v1["lessThanInteger-cpu-arguments-slope"],
        v1["chooseUnit-memory-arguments"],
        v1["divideInteger-cpu-arguments-model-arguments-slope"],
        v1["decodeUtf8-cpu-arguments-slope"],
        v1["chooseData-cpu-arguments"],
        v1["verifySignature-cpu-arguments-intercept"],
        v1["modInteger-memory-arguments-minimum"],
        v1["lessThanEqualsByteString-memory-arguments"],
        v1["quotientInteger-cpu-arguments-constant"],
        v1["consByteString-memory-arguments-slope"],
        v1["tailList-memory-arguments"],
        v1["divideInteger-cpu-arguments-model-arguments-intercept"],
        v1["decodeUtf8-cpu-arguments-intercept"],
        v1["lessThanEqualsInteger-memory-arguments"],
        v1["appendByteString-cpu-arguments-intercept"],
        v1["unMapData-memory-arguments"],
        v1["chooseList-cpu-arguments"],
        v1["divideInteger-memory-arguments-minimum"],
        v1["unListData-memory-arguments"],
        v1["remainderInteger-cpu-arguments-constant"],
        v1["addInteger-memory-arguments-slope"],
        v1["sha3_256-memory-arguments"],
        v1["lessThanByteString-cpu-arguments-intercept"],
        v1["modInteger-cpu-arguments-constant"],
        v1["lessThanEqualsInteger-cpu-arguments-slope"],
        v1["appendByteString-memory-arguments-intercept"],
        v1["listData-cpu-arguments"],
        v1["ifThenElse-memory-arguments"],
        v1["cekApplyCost-exBudgetMemory"],
        v1["sliceByteString-memory-arguments-intercept"],
        v1["unIData-cpu-arguments"],
        v1["modInteger-cpu-arguments-model-arguments-slope"],
        v1["equalsData-cpu-arguments-intercept"],
        v1["mkNilPairData-memory-arguments"],
        v1["cekConstCost-exBudgetCPU"],
        v1["indexByteString-memory-arguments"],
        v1["blake2b-memory-arguments"],
        v1["lessThanEqualsByteString-cpu-arguments-slope"],
        v1["cekDelayCost-exBudgetCPU"],
        v1["multiplyInteger-memory-arguments-slope"],
        v1["remainderInteger-memory-arguments-slope"],
        v1["subtractInteger-cpu-arguments-slope"],
        v1["iData-memory-arguments"],
        v1["cekBuiltinCost-exBudgetCPU"],
        v1["mkNilData-memory-arguments"],
        v1["cekForceCost-exBudgetMemory"],
        v1["trace-memory-arguments"],
        v1["encodeUtf8-cpu-arguments-intercept"],
        v1["sha2_256-cpu-arguments-intercept"],
        v1["headList-memory-arguments"],
        v1["unBData-cpu-arguments"],
        v1["remainderInteger-memory-arguments-minimum"],
        v1["unMapData-cpu-arguments"],
        v1["sha2_256-cpu-arguments-slope"],
        v1["modInteger-memory-arguments-intercept"],
        v1["ifThenElse-cpu-arguments"],
        v1["tailList-cpu-arguments"],
        v1["multiplyInteger-memory-arguments-intercept"],
        v1["remainderInteger-memory-arguments-intercept"],
        v1["consByteString-cpu-arguments-slope"],
        v1["lengthOfByteString-memory-arguments"],
        v1["fstPair-memory-arguments"],
        v1["mkPairData-cpu-arguments"],
        v1["appendString-cpu-arguments-intercept"],
        v1["verifySignature-memory-arguments"],
        v1["sliceByteString-cpu-arguments-intercept"],
        v1["equalsData-cpu-arguments-slope"],
        v1["lessThanEqualsByteString-cpu-arguments-intercept"],
        v1["chooseList-memory-arguments"],
        v1["nullList-memory-arguments"],
        v1["unListData-cpu-arguments"],
        v1["equalsData-memory-arguments"],
        v1["quotientInteger-cpu-arguments-model-arguments-slope"],
        v1["sha2_256-memory-arguments"],
        v1["quotientInteger-cpu-arguments-model-arguments-intercept"],
        v1["encodeUtf8-memory-arguments-intercept"],
        v1["quotientInteger-memory-arguments-slope"],
        v1["unConstrData-cpu-arguments"],
        v1["sliceByteString-cpu-arguments-slope"],
        v1["cekBuiltinCost-exBudgetMemory"],
        v1["equalsInteger-cpu-arguments-slope"],
        v1["subtractInteger-memory-arguments-slope"],
        v1["mkCons-cpu-arguments"],
        v1["chooseUnit-cpu-arguments"],
        v1["chooseData-memory-arguments"],
        v1["bData-memory-arguments"],
        v1["appendString-cpu-arguments-slope"],
        v1["decodeUtf8-memory-arguments-slope"],
        v1["fstPair-cpu-arguments"],
        v1["unConstrData-memory-arguments"],
        v1["sndPair-cpu-arguments"],
        v1["addInteger-memory-arguments-intercept"],
        v1["cekConstCost-exBudgetMemory"],
        v1["remainderInteger-cpu-arguments-model-arguments-intercept"],
        v1["equalsString-cpu-arguments-intercept"],
        v1["mkCons-memory-arguments"],
        v1["mkPairData-memory-arguments"],
        v1["lengthOfByteString-cpu-arguments"],
        v1["remainderInteger-cpu-arguments-model-arguments-slope"],
        v1["cekApplyCost-exBudgetCPU"],
        v1["constrData-cpu-arguments"],
        v1["nullList-cpu-arguments"],
        v1["headList-cpu-arguments"],
        v1["decodeUtf8-memory-arguments-intercept"],
        v1["subtractInteger-cpu-arguments-intercept"],
        v1["subtractInteger-memory-arguments-intercept"],
        v1["encodeUtf8-memory-arguments-slope"],
        v1["equalsInteger-cpu-arguments-intercept"],
        v1["quotientInteger-memory-arguments-intercept"],
        v1["cekVarCost-exBudgetMemory"],
        v1["unBData-memory-arguments"],
        v1["addInteger-cpu-arguments-intercept"],
        v1["mkNilPairData-cpu-arguments"],
        v1["divideInteger-memory-arguments-slope"]
    ]) as any;
}

export function toCostModelArrV2( v2: AnyV2CostModel ): CostModelPlutusV2Array
{
    if( Array.isArray( v2 ) ) return v2;

    // order matters; cant do 'Object.keys'
    return Object.freeze([
        v2["addInteger-cpu-arguments-intercept"],
        v2["addInteger-cpu-arguments-slope"],
        v2["addInteger-memory-arguments-intercept"],
        v2["addInteger-memory-arguments-slope"],
        v2["appendByteString-cpu-arguments-intercept"],
        v2["appendByteString-cpu-arguments-slope"],
        v2["appendByteString-memory-arguments-intercept"],
        v2["appendByteString-memory-arguments-slope"],
        v2["appendString-cpu-arguments-intercept"],
        v2["appendString-cpu-arguments-slope"],
        v2["appendString-memory-arguments-intercept"],
        v2["appendString-memory-arguments-slope"],
        v2["bData-cpu-arguments"],
        v2["bData-memory-arguments"],
        v2["blake2b_256-cpu-arguments-intercept"],
        v2["blake2b_256-cpu-arguments-slope"],
        v2["blake2b_256-memory-arguments"],
        v2["cekApplyCost-exBudgetCPU"],
        v2["cekApplyCost-exBudgetMemory"],
        v2["cekBuiltinCost-exBudgetCPU"],
        v2["cekBuiltinCost-exBudgetMemory"],
        v2["cekConstCost-exBudgetCPU"],
        v2["cekConstCost-exBudgetMemory"],
        v2["cekDelayCost-exBudgetCPU"],
        v2["cekDelayCost-exBudgetMemory"],
        v2["cekForceCost-exBudgetCPU"],
        v2["cekForceCost-exBudgetMemory"],
        v2["cekLamCost-exBudgetCPU"],
        v2["cekLamCost-exBudgetMemory"],
        v2["cekStartupCost-exBudgetCPU"],
        v2["cekStartupCost-exBudgetMemory"],
        v2["cekVarCost-exBudgetCPU"],
        v2["cekVarCost-exBudgetMemory"],
        v2["chooseData-cpu-arguments"],
        v2["chooseData-memory-arguments"],
        v2["chooseList-cpu-arguments"],
        v2["chooseList-memory-arguments"],
        v2["chooseUnit-cpu-arguments"],
        v2["chooseUnit-memory-arguments"],
        v2["consByteString-cpu-arguments-intercept"],
        v2["consByteString-cpu-arguments-slope"],
        v2["consByteString-memory-arguments-intercept"],
        v2["consByteString-memory-arguments-slope"],
        v2["constrData-cpu-arguments"],
        v2["constrData-memory-arguments"],
        v2["decodeUtf8-cpu-arguments-intercept"],
        v2["decodeUtf8-cpu-arguments-slope"],
        v2["decodeUtf8-memory-arguments-intercept"],
        v2["decodeUtf8-memory-arguments-slope"],
        v2["divideInteger-cpu-arguments-constant"],
        v2["divideInteger-cpu-arguments-model-arguments-intercept"],
        v2["divideInteger-cpu-arguments-model-arguments-slope"],
        v2["divideInteger-memory-arguments-intercept"],
        v2["divideInteger-memory-arguments-minimum"],
        v2["divideInteger-memory-arguments-slope"],
        v2["encodeUtf8-cpu-arguments-intercept"],
        v2["encodeUtf8-cpu-arguments-slope"],
        v2["encodeUtf8-memory-arguments-intercept"],
        v2["encodeUtf8-memory-arguments-slope"],
        v2["equalsByteString-cpu-arguments-constant"],
        v2["equalsByteString-cpu-arguments-intercept"],
        v2["equalsByteString-cpu-arguments-slope"],
        v2["equalsByteString-memory-arguments"],
        v2["equalsData-cpu-arguments-intercept"],
        v2["equalsData-cpu-arguments-slope"],
        v2["equalsData-memory-arguments"],
        v2["equalsInteger-cpu-arguments-intercept"],
        v2["equalsInteger-cpu-arguments-slope"],
        v2["equalsInteger-memory-arguments"],
        v2["equalsString-cpu-arguments-constant"],
        v2["equalsString-cpu-arguments-intercept"],
        v2["equalsString-cpu-arguments-slope"],
        v2["equalsString-memory-arguments"],
        v2["fstPair-cpu-arguments"],
        v2["fstPair-memory-arguments"],
        v2["headList-cpu-arguments"],
        v2["headList-memory-arguments"],
        v2["iData-cpu-arguments"],
        v2["iData-memory-arguments"],
        v2["ifThenElse-cpu-arguments"],
        v2["ifThenElse-memory-arguments"],
        v2["indexByteString-cpu-arguments"],
        v2["indexByteString-memory-arguments"],
        v2["lengthOfByteString-cpu-arguments"],
        v2["lengthOfByteString-memory-arguments"],
        v2["lessThanByteString-cpu-arguments-intercept"],
        v2["lessThanByteString-cpu-arguments-slope"],
        v2["lessThanByteString-memory-arguments"],
        v2["lessThanEqualsByteString-cpu-arguments-intercept"],
        v2["lessThanEqualsByteString-cpu-arguments-slope"],
        v2["lessThanEqualsByteString-memory-arguments"],
        v2["lessThanEqualsInteger-cpu-arguments-intercept"],
        v2["lessThanEqualsInteger-cpu-arguments-slope"],
        v2["lessThanEqualsInteger-memory-arguments"],
        v2["lessThanInteger-cpu-arguments-intercept"],
        v2["lessThanInteger-cpu-arguments-slope"],
        v2["lessThanInteger-memory-arguments"],
        v2["listData-cpu-arguments"],
        v2["listData-memory-arguments"],
        v2["mapData-cpu-arguments"],
        v2["mapData-memory-arguments"],
        v2["mkCons-cpu-arguments"],
        v2["mkCons-memory-arguments"],
        v2["mkNilData-cpu-arguments"],
        v2["mkNilData-memory-arguments"],
        v2["mkNilPairData-cpu-arguments"],
        v2["mkNilPairData-memory-arguments"],
        v2["mkPairData-cpu-arguments"],
        v2["mkPairData-memory-arguments"],
        v2["modInteger-cpu-arguments-constant"],
        v2["modInteger-cpu-arguments-model-arguments-intercept"],
        v2["modInteger-cpu-arguments-model-arguments-slope"],
        v2["modInteger-memory-arguments-intercept"],
        v2["modInteger-memory-arguments-minimum"],
        v2["modInteger-memory-arguments-slope"],
        v2["multiplyInteger-cpu-arguments-intercept"],
        v2["multiplyInteger-cpu-arguments-slope"],
        v2["multiplyInteger-memory-arguments-intercept"],
        v2["multiplyInteger-memory-arguments-slope"],
        v2["nullList-cpu-arguments"],
        v2["nullList-memory-arguments"],
        v2["quotientInteger-cpu-arguments-constant"],
        v2["quotientInteger-cpu-arguments-model-arguments-intercept"],
        v2["quotientInteger-cpu-arguments-model-arguments-slope"],
        v2["quotientInteger-memory-arguments-intercept"],
        v2["quotientInteger-memory-arguments-minimum"],
        v2["quotientInteger-memory-arguments-slope"],
        v2["remainderInteger-cpu-arguments-constant"],
        v2["remainderInteger-cpu-arguments-model-arguments-intercept"],
        v2["remainderInteger-cpu-arguments-model-arguments-slope"],
        v2["remainderInteger-memory-arguments-intercept"],
        v2["remainderInteger-memory-arguments-minimum"],
        v2["remainderInteger-memory-arguments-slope"],
        v2["serialiseData-cpu-arguments-intercept"],
        v2["serialiseData-cpu-arguments-slope"],
        v2["serialiseData-memory-arguments-intercept"],
        v2["serialiseData-memory-arguments-slope"],
        v2["sha2_256-cpu-arguments-intercept"],
        v2["sha2_256-cpu-arguments-slope"],
        v2["sha2_256-memory-arguments"],
        v2["sha3_256-cpu-arguments-intercept"],
        v2["sha3_256-cpu-arguments-slope"],
        v2["sha3_256-memory-arguments"],
        v2["sliceByteString-cpu-arguments-intercept"],
        v2["sliceByteString-cpu-arguments-slope"],
        v2["sliceByteString-memory-arguments-intercept"],
        v2["sliceByteString-memory-arguments-slope"],
        v2["sndPair-cpu-arguments"],
        v2["sndPair-memory-arguments"],
        v2["subtractInteger-cpu-arguments-intercept"],
        v2["subtractInteger-cpu-arguments-slope"],
        v2["subtractInteger-memory-arguments-intercept"],
        v2["subtractInteger-memory-arguments-slope"],
        v2["tailList-cpu-arguments"],
        v2["tailList-memory-arguments"],
        v2["trace-cpu-arguments"],
        v2["trace-memory-arguments"],
        v2["unBData-cpu-arguments"],
        v2["unBData-memory-arguments"],
        v2["unConstrData-cpu-arguments"],
        v2["unConstrData-memory-arguments"],
        v2["unIData-cpu-arguments"],
        v2["unIData-memory-arguments"],
        v2["unListData-cpu-arguments"],
        v2["unListData-memory-arguments"],
        v2["unMapData-cpu-arguments"],
        v2["unMapData-memory-arguments"],
        v2["verifyEcdsaSecp256k1Signature-cpu-arguments"],
        v2["verifyEcdsaSecp256k1Signature-memory-arguments"],
        v2["verifyEd25519Signature-cpu-arguments-intercept"],
        v2["verifyEd25519Signature-cpu-arguments-slope"],
        v2["verifyEd25519Signature-memory-arguments"],
        v2["verifySchnorrSecp256k1Signature-cpu-arguments-intercept"],
        v2["verifySchnorrSecp256k1Signature-cpu-arguments-slope"],
        v2["verifySchnorrSecp256k1Signature-memory-arguments"]
    ]) as any;
}

export interface CostModelPlutusV1 {
    "mapData-memory-arguments": CanBeUInteger,
    "lessThanInteger-memory-arguments": CanBeUInteger,
    "sha3_256-cpu-arguments-slope": CanBeUInteger,
    "bData-cpu-arguments": CanBeUInteger,
    "equalsByteString-cpu-arguments-intercept": CanBeUInteger,
    "equalsString-cpu-arguments-constant": CanBeUInteger,
    "modInteger-memory-arguments-slope": CanBeUInteger,
    "equalsInteger-memory-arguments": CanBeUInteger,
    "trace-cpu-arguments": CanBeUInteger,
    "iData-cpu-arguments": CanBeUInteger,
    "equalsByteString-memory-arguments": CanBeUInteger,
    "unIData-memory-arguments": CanBeUInteger,
    "consByteString-memory-arguments-intercept": CanBeUInteger,
    "cekLamCost-exBudgetCPU": CanBeUInteger,
    "indexByteString-cpu-arguments": CanBeUInteger,
    "cekStartupCost-exBudgetMemory": CanBeUInteger,
    "listData-memory-arguments": CanBeUInteger,
    "divideInteger-cpu-arguments-constant": CanBeUInteger,
    "lessThanInteger-cpu-arguments-intercept": CanBeUInteger,
    "verifySignature-cpu-arguments-slope": CanBeUInteger,
    "appendString-memory-arguments-intercept": CanBeUInteger,
    "equalsString-cpu-arguments-slope": CanBeUInteger,
    "blake2b-cpu-arguments-intercept": CanBeUInteger,
    "encodeUtf8-cpu-arguments-slope": CanBeUInteger,
    "mapData-cpu-arguments": CanBeUInteger,
    "equalsByteString-cpu-arguments-slope": CanBeUInteger,
    "multiplyInteger-cpu-arguments-intercept": CanBeUInteger,
    "cekStartupCost-exBudgetCPU": CanBeUInteger,
    "sndPair-memory-arguments": CanBeUInteger,
    "sha3_256-cpu-arguments-intercept": CanBeUInteger,
    "addInteger-cpu-arguments-slope": CanBeUInteger,
    "constrData-memory-arguments": CanBeUInteger,
    "divideInteger-memory-arguments-intercept": CanBeUInteger,
    "cekForceCost-exBudgetCPU": CanBeUInteger,
    "equalsByteString-cpu-arguments-constant": CanBeUInteger,
    "modInteger-cpu-arguments-model-arguments-intercept": CanBeUInteger,
    "sliceByteString-memory-arguments-slope": CanBeUInteger,
    "equalsString-memory-arguments": CanBeUInteger,
    "cekLamCost-exBudgetMemory": CanBeUInteger,
    "lessThanEqualsInteger-cpu-arguments-intercept": CanBeUInteger,
    "quotientInteger-memory-arguments-minimum": CanBeUInteger,
    "consByteString-cpu-arguments-intercept": CanBeUInteger,
    "appendByteString-memory-arguments-slope": CanBeUInteger,
    "lessThanByteString-cpu-arguments-slope": CanBeUInteger,
    "lessThanByteString-memory-arguments": CanBeUInteger,
    "multiplyInteger-cpu-arguments-slope": CanBeUInteger,
    "cekVarCost-exBudgetCPU": CanBeUInteger,
    "cekDelayCost-exBudgetMemory": CanBeUInteger,
    "blake2b-cpu-arguments-slope": CanBeUInteger,
    "mkNilData-cpu-arguments": CanBeUInteger,
    "appendByteString-cpu-arguments-slope": CanBeUInteger,
    "appendString-memory-arguments-slope": CanBeUInteger,
    "lessThanInteger-cpu-arguments-slope": CanBeUInteger,
    "chooseUnit-memory-arguments": CanBeUInteger,
    "divideInteger-cpu-arguments-model-arguments-slope": CanBeUInteger,
    "decodeUtf8-cpu-arguments-slope": CanBeUInteger,
    "chooseData-cpu-arguments": CanBeUInteger,
    "verifySignature-cpu-arguments-intercept": CanBeUInteger,
    "modInteger-memory-arguments-minimum": CanBeUInteger,
    "lessThanEqualsByteString-memory-arguments": CanBeUInteger,
    "quotientInteger-cpu-arguments-constant": CanBeUInteger,
    "consByteString-memory-arguments-slope": CanBeUInteger,
    "tailList-memory-arguments": CanBeUInteger,
    "divideInteger-cpu-arguments-model-arguments-intercept": CanBeUInteger,
    "decodeUtf8-cpu-arguments-intercept": CanBeUInteger,
    "lessThanEqualsInteger-memory-arguments": CanBeUInteger,
    "appendByteString-cpu-arguments-intercept": CanBeUInteger,
    "unMapData-memory-arguments": CanBeUInteger,
    "chooseList-cpu-arguments": CanBeUInteger,
    "divideInteger-memory-arguments-minimum": CanBeUInteger,
    "unListData-memory-arguments": CanBeUInteger,
    "remainderInteger-cpu-arguments-constant": CanBeUInteger,
    "addInteger-memory-arguments-slope": CanBeUInteger,
    "sha3_256-memory-arguments": CanBeUInteger,
    "lessThanByteString-cpu-arguments-intercept": CanBeUInteger,
    "modInteger-cpu-arguments-constant": CanBeUInteger,
    "lessThanEqualsInteger-cpu-arguments-slope": CanBeUInteger,
    "appendByteString-memory-arguments-intercept": CanBeUInteger,
    "listData-cpu-arguments": CanBeUInteger,
    "ifThenElse-memory-arguments": CanBeUInteger,
    "cekApplyCost-exBudgetMemory": CanBeUInteger,
    "sliceByteString-memory-arguments-intercept": CanBeUInteger,
    "unIData-cpu-arguments": CanBeUInteger,
    "modInteger-cpu-arguments-model-arguments-slope": CanBeUInteger,
    "equalsData-cpu-arguments-intercept": CanBeUInteger,
    "mkNilPairData-memory-arguments": CanBeUInteger,
    "cekConstCost-exBudgetCPU": CanBeUInteger,
    "indexByteString-memory-arguments": CanBeUInteger,
    "blake2b-memory-arguments": CanBeUInteger,
    "lessThanEqualsByteString-cpu-arguments-slope": CanBeUInteger,
    "cekDelayCost-exBudgetCPU": CanBeUInteger,
    "multiplyInteger-memory-arguments-slope": CanBeUInteger,
    "remainderInteger-memory-arguments-slope": CanBeUInteger,
    "subtractInteger-cpu-arguments-slope": CanBeUInteger,
    "iData-memory-arguments": CanBeUInteger,
    "cekBuiltinCost-exBudgetCPU": CanBeUInteger,
    "mkNilData-memory-arguments": CanBeUInteger,
    "cekForceCost-exBudgetMemory": CanBeUInteger,
    "trace-memory-arguments": CanBeUInteger,
    "encodeUtf8-cpu-arguments-intercept": CanBeUInteger,
    "sha2_256-cpu-arguments-intercept": CanBeUInteger,
    "headList-memory-arguments": CanBeUInteger,
    "unBData-cpu-arguments": CanBeUInteger,
    "remainderInteger-memory-arguments-minimum": CanBeUInteger,
    "unMapData-cpu-arguments": CanBeUInteger,
    "sha2_256-cpu-arguments-slope": CanBeUInteger,
    "modInteger-memory-arguments-intercept": CanBeUInteger,
    "ifThenElse-cpu-arguments": CanBeUInteger,
    "tailList-cpu-arguments": CanBeUInteger,
    "multiplyInteger-memory-arguments-intercept": CanBeUInteger,
    "remainderInteger-memory-arguments-intercept": CanBeUInteger,
    "consByteString-cpu-arguments-slope": CanBeUInteger,
    "lengthOfByteString-memory-arguments": CanBeUInteger,
    "fstPair-memory-arguments": CanBeUInteger,
    "mkPairData-cpu-arguments": CanBeUInteger,
    "appendString-cpu-arguments-intercept": CanBeUInteger,
    "verifySignature-memory-arguments": CanBeUInteger,
    "sliceByteString-cpu-arguments-intercept": CanBeUInteger,
    "equalsData-cpu-arguments-slope": CanBeUInteger,
    "lessThanEqualsByteString-cpu-arguments-intercept": CanBeUInteger,
    "chooseList-memory-arguments": CanBeUInteger,
    "nullList-memory-arguments": CanBeUInteger,
    "unListData-cpu-arguments": CanBeUInteger,
    "equalsData-memory-arguments": CanBeUInteger,
    "quotientInteger-cpu-arguments-model-arguments-slope": CanBeUInteger,
    "sha2_256-memory-arguments": CanBeUInteger,
    "quotientInteger-cpu-arguments-model-arguments-intercept": CanBeUInteger,
    "encodeUtf8-memory-arguments-intercept": CanBeUInteger,
    "quotientInteger-memory-arguments-slope": CanBeUInteger,
    "unConstrData-cpu-arguments": CanBeUInteger,
    "sliceByteString-cpu-arguments-slope": CanBeUInteger,
    "cekBuiltinCost-exBudgetMemory": CanBeUInteger,
    "equalsInteger-cpu-arguments-slope": CanBeUInteger,
    "subtractInteger-memory-arguments-slope": CanBeUInteger,
    "mkCons-cpu-arguments": CanBeUInteger,
    "chooseUnit-cpu-arguments": CanBeUInteger,
    "chooseData-memory-arguments": CanBeUInteger,
    "bData-memory-arguments": CanBeUInteger,
    "appendString-cpu-arguments-slope": CanBeUInteger,
    "decodeUtf8-memory-arguments-slope": CanBeUInteger,
    "fstPair-cpu-arguments": CanBeUInteger,
    "unConstrData-memory-arguments": CanBeUInteger,
    "sndPair-cpu-arguments": CanBeUInteger,
    "addInteger-memory-arguments-intercept": CanBeUInteger,
    "cekConstCost-exBudgetMemory": CanBeUInteger,
    "remainderInteger-cpu-arguments-model-arguments-intercept": CanBeUInteger,
    "equalsString-cpu-arguments-intercept": CanBeUInteger,
    "mkCons-memory-arguments": CanBeUInteger,
    "mkPairData-memory-arguments": CanBeUInteger,
    "lengthOfByteString-cpu-arguments": CanBeUInteger,
    "remainderInteger-cpu-arguments-model-arguments-slope": CanBeUInteger,
    "cekApplyCost-exBudgetCPU": CanBeUInteger,
    "constrData-cpu-arguments": CanBeUInteger,
    "nullList-cpu-arguments": CanBeUInteger,
    "headList-cpu-arguments": CanBeUInteger,
    "decodeUtf8-memory-arguments-intercept": CanBeUInteger,
    "subtractInteger-cpu-arguments-intercept": CanBeUInteger,
    "subtractInteger-memory-arguments-intercept": CanBeUInteger,
    "encodeUtf8-memory-arguments-slope": CanBeUInteger,
    "equalsInteger-cpu-arguments-intercept": CanBeUInteger,
    "quotientInteger-memory-arguments-intercept": CanBeUInteger,
    "cekVarCost-exBudgetMemory": CanBeUInteger,
    "unBData-memory-arguments": CanBeUInteger,
    "addInteger-cpu-arguments-intercept": CanBeUInteger,
    "mkNilPairData-cpu-arguments": CanBeUInteger,
    "divideInteger-memory-arguments-slope": CanBeUInteger
};

// 166 CanBeUInteger
export type CostModelPlutusV1Array = [
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
]

export interface CostModelPlutusV2 {
    "addInteger-cpu-arguments-intercept": CanBeUInteger,
    "addInteger-cpu-arguments-slope": CanBeUInteger,
    "addInteger-memory-arguments-intercept": CanBeUInteger,
    "addInteger-memory-arguments-slope": CanBeUInteger,
    "appendByteString-cpu-arguments-intercept": CanBeUInteger,
    "appendByteString-cpu-arguments-slope": CanBeUInteger,
    "appendByteString-memory-arguments-intercept": CanBeUInteger,
    "appendByteString-memory-arguments-slope": CanBeUInteger,
    "appendString-cpu-arguments-intercept": CanBeUInteger,
    "appendString-cpu-arguments-slope": CanBeUInteger,
    "appendString-memory-arguments-intercept": CanBeUInteger,
    "appendString-memory-arguments-slope": CanBeUInteger,
    "bData-cpu-arguments": CanBeUInteger,
    "bData-memory-arguments": CanBeUInteger,
    "blake2b_256-cpu-arguments-intercept": CanBeUInteger,
    "blake2b_256-cpu-arguments-slope": CanBeUInteger,
    "blake2b_256-memory-arguments": CanBeUInteger,
    "cekApplyCost-exBudgetCPU": CanBeUInteger,
    "cekApplyCost-exBudgetMemory": CanBeUInteger,
    "cekBuiltinCost-exBudgetCPU": CanBeUInteger,
    "cekBuiltinCost-exBudgetMemory": CanBeUInteger,
    "cekConstCost-exBudgetCPU": CanBeUInteger,
    "cekConstCost-exBudgetMemory": CanBeUInteger,
    "cekDelayCost-exBudgetCPU": CanBeUInteger,
    "cekDelayCost-exBudgetMemory": CanBeUInteger,
    "cekForceCost-exBudgetCPU": CanBeUInteger,
    "cekForceCost-exBudgetMemory": CanBeUInteger,
    "cekLamCost-exBudgetCPU": CanBeUInteger,
    "cekLamCost-exBudgetMemory": CanBeUInteger,
    "cekStartupCost-exBudgetCPU": CanBeUInteger,
    "cekStartupCost-exBudgetMemory": CanBeUInteger,
    "cekVarCost-exBudgetCPU": CanBeUInteger,
    "cekVarCost-exBudgetMemory": CanBeUInteger,
    "chooseData-cpu-arguments": CanBeUInteger,
    "chooseData-memory-arguments": CanBeUInteger,
    "chooseList-cpu-arguments": CanBeUInteger,
    "chooseList-memory-arguments": CanBeUInteger,
    "chooseUnit-cpu-arguments": CanBeUInteger,
    "chooseUnit-memory-arguments": CanBeUInteger,
    "consByteString-cpu-arguments-intercept": CanBeUInteger,
    "consByteString-cpu-arguments-slope": CanBeUInteger,
    "consByteString-memory-arguments-intercept": CanBeUInteger,
    "consByteString-memory-arguments-slope": CanBeUInteger,
    "constrData-cpu-arguments": CanBeUInteger,
    "constrData-memory-arguments": CanBeUInteger,
    "decodeUtf8-cpu-arguments-intercept": CanBeUInteger,
    "decodeUtf8-cpu-arguments-slope": CanBeUInteger,
    "decodeUtf8-memory-arguments-intercept": CanBeUInteger,
    "decodeUtf8-memory-arguments-slope": CanBeUInteger,
    "divideInteger-cpu-arguments-constant": CanBeUInteger,
    "divideInteger-cpu-arguments-model-arguments-intercept": CanBeUInteger,
    "divideInteger-cpu-arguments-model-arguments-slope": CanBeUInteger,
    "divideInteger-memory-arguments-intercept": CanBeUInteger,
    "divideInteger-memory-arguments-minimum": CanBeUInteger,
    "divideInteger-memory-arguments-slope": CanBeUInteger,
    "encodeUtf8-cpu-arguments-intercept": CanBeUInteger,
    "encodeUtf8-cpu-arguments-slope": CanBeUInteger,
    "encodeUtf8-memory-arguments-intercept": CanBeUInteger,
    "encodeUtf8-memory-arguments-slope": CanBeUInteger,
    "equalsByteString-cpu-arguments-constant": CanBeUInteger,
    "equalsByteString-cpu-arguments-intercept": CanBeUInteger,
    "equalsByteString-cpu-arguments-slope": CanBeUInteger,
    "equalsByteString-memory-arguments": CanBeUInteger,
    "equalsData-cpu-arguments-intercept": CanBeUInteger,
    "equalsData-cpu-arguments-slope": CanBeUInteger,
    "equalsData-memory-arguments": CanBeUInteger,
    "equalsInteger-cpu-arguments-intercept": CanBeUInteger,
    "equalsInteger-cpu-arguments-slope": CanBeUInteger,
    "equalsInteger-memory-arguments": CanBeUInteger,
    "equalsString-cpu-arguments-constant": CanBeUInteger,
    "equalsString-cpu-arguments-intercept": CanBeUInteger,
    "equalsString-cpu-arguments-slope": CanBeUInteger,
    "equalsString-memory-arguments": CanBeUInteger,
    "fstPair-cpu-arguments": CanBeUInteger,
    "fstPair-memory-arguments": CanBeUInteger,
    "headList-cpu-arguments": CanBeUInteger,
    "headList-memory-arguments": CanBeUInteger,
    "iData-cpu-arguments": CanBeUInteger,
    "iData-memory-arguments": CanBeUInteger,
    "ifThenElse-cpu-arguments": CanBeUInteger,
    "ifThenElse-memory-arguments": CanBeUInteger,
    "indexByteString-cpu-arguments": CanBeUInteger,
    "indexByteString-memory-arguments": CanBeUInteger,
    "lengthOfByteString-cpu-arguments": CanBeUInteger,
    "lengthOfByteString-memory-arguments": CanBeUInteger,
    "lessThanByteString-cpu-arguments-intercept": CanBeUInteger,
    "lessThanByteString-cpu-arguments-slope": CanBeUInteger,
    "lessThanByteString-memory-arguments": CanBeUInteger,
    "lessThanEqualsByteString-cpu-arguments-intercept": CanBeUInteger,
    "lessThanEqualsByteString-cpu-arguments-slope": CanBeUInteger,
    "lessThanEqualsByteString-memory-arguments": CanBeUInteger,
    "lessThanEqualsInteger-cpu-arguments-intercept": CanBeUInteger,
    "lessThanEqualsInteger-cpu-arguments-slope": CanBeUInteger,
    "lessThanEqualsInteger-memory-arguments": CanBeUInteger,
    "lessThanInteger-cpu-arguments-intercept": CanBeUInteger,
    "lessThanInteger-cpu-arguments-slope": CanBeUInteger,
    "lessThanInteger-memory-arguments": CanBeUInteger,
    "listData-cpu-arguments": CanBeUInteger,
    "listData-memory-arguments": CanBeUInteger,
    "mapData-cpu-arguments": CanBeUInteger,
    "mapData-memory-arguments": CanBeUInteger,
    "mkCons-cpu-arguments": CanBeUInteger,
    "mkCons-memory-arguments": CanBeUInteger,
    "mkNilData-cpu-arguments": CanBeUInteger,
    "mkNilData-memory-arguments": CanBeUInteger,
    "mkNilPairData-cpu-arguments": CanBeUInteger,
    "mkNilPairData-memory-arguments": CanBeUInteger,
    "mkPairData-cpu-arguments": CanBeUInteger,
    "mkPairData-memory-arguments": CanBeUInteger,
    "modInteger-cpu-arguments-constant": CanBeUInteger,
    "modInteger-cpu-arguments-model-arguments-intercept": CanBeUInteger,
    "modInteger-cpu-arguments-model-arguments-slope": CanBeUInteger,
    "modInteger-memory-arguments-intercept": CanBeUInteger,
    "modInteger-memory-arguments-minimum": CanBeUInteger,
    "modInteger-memory-arguments-slope": CanBeUInteger,
    "multiplyInteger-cpu-arguments-intercept": CanBeUInteger,
    "multiplyInteger-cpu-arguments-slope": CanBeUInteger,
    "multiplyInteger-memory-arguments-intercept": CanBeUInteger,
    "multiplyInteger-memory-arguments-slope": CanBeUInteger,
    "nullList-cpu-arguments": CanBeUInteger,
    "nullList-memory-arguments": CanBeUInteger,
    "quotientInteger-cpu-arguments-constant": CanBeUInteger,
    "quotientInteger-cpu-arguments-model-arguments-intercept": CanBeUInteger,
    "quotientInteger-cpu-arguments-model-arguments-slope": CanBeUInteger,
    "quotientInteger-memory-arguments-intercept": CanBeUInteger,
    "quotientInteger-memory-arguments-minimum": CanBeUInteger,
    "quotientInteger-memory-arguments-slope": CanBeUInteger,
    "remainderInteger-cpu-arguments-constant": CanBeUInteger,
    "remainderInteger-cpu-arguments-model-arguments-intercept": CanBeUInteger,
    "remainderInteger-cpu-arguments-model-arguments-slope": CanBeUInteger,
    "remainderInteger-memory-arguments-intercept": CanBeUInteger,
    "remainderInteger-memory-arguments-minimum": CanBeUInteger,
    "remainderInteger-memory-arguments-slope": CanBeUInteger,
    "serialiseData-cpu-arguments-intercept": CanBeUInteger,
    "serialiseData-cpu-arguments-slope": CanBeUInteger,
    "serialiseData-memory-arguments-intercept": CanBeUInteger,
    "serialiseData-memory-arguments-slope": CanBeUInteger,
    "sha2_256-cpu-arguments-intercept": CanBeUInteger,
    "sha2_256-cpu-arguments-slope": CanBeUInteger,
    "sha2_256-memory-arguments": CanBeUInteger,
    "sha3_256-cpu-arguments-intercept": CanBeUInteger,
    "sha3_256-cpu-arguments-slope": CanBeUInteger,
    "sha3_256-memory-arguments": CanBeUInteger,
    "sliceByteString-cpu-arguments-intercept": CanBeUInteger,
    "sliceByteString-cpu-arguments-slope": CanBeUInteger,
    "sliceByteString-memory-arguments-intercept": CanBeUInteger,
    "sliceByteString-memory-arguments-slope": CanBeUInteger,
    "sndPair-cpu-arguments": CanBeUInteger,
    "sndPair-memory-arguments": CanBeUInteger,
    "subtractInteger-cpu-arguments-intercept": CanBeUInteger,
    "subtractInteger-cpu-arguments-slope": CanBeUInteger,
    "subtractInteger-memory-arguments-intercept": CanBeUInteger,
    "subtractInteger-memory-arguments-slope": CanBeUInteger,
    "tailList-cpu-arguments": CanBeUInteger,
    "tailList-memory-arguments": CanBeUInteger,
    "trace-cpu-arguments": CanBeUInteger,
    "trace-memory-arguments": CanBeUInteger,
    "unBData-cpu-arguments": CanBeUInteger,
    "unBData-memory-arguments": CanBeUInteger,
    "unConstrData-cpu-arguments": CanBeUInteger,
    "unConstrData-memory-arguments": CanBeUInteger,
    "unIData-cpu-arguments": CanBeUInteger,
    "unIData-memory-arguments": CanBeUInteger,
    "unListData-cpu-arguments": CanBeUInteger,
    "unListData-memory-arguments": CanBeUInteger,
    "unMapData-cpu-arguments": CanBeUInteger,
    "unMapData-memory-arguments": CanBeUInteger,
    "verifyEcdsaSecp256k1Signature-cpu-arguments": CanBeUInteger,
    "verifyEcdsaSecp256k1Signature-memory-arguments": CanBeUInteger,
    "verifyEd25519Signature-cpu-arguments-intercept": CanBeUInteger,
    "verifyEd25519Signature-cpu-arguments-slope": CanBeUInteger,
    "verifyEd25519Signature-memory-arguments": CanBeUInteger,
    "verifySchnorrSecp256k1Signature-cpu-arguments-intercept": CanBeUInteger,
    "verifySchnorrSecp256k1Signature-cpu-arguments-slope": CanBeUInteger,
    "verifySchnorrSecp256k1Signature-memory-arguments": CanBeUInteger
}

// 175 CanBeUInteger
export type CostModelPlutusV2Array = [
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger
]